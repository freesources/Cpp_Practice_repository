string Infix2Postfix(string infix)
{
	string postfix = "";
	stack <char> stack;

	for (int i = 0; i < infix.length(); i++)
	{
		char token = infix.at(i);

		if (isalnum(token))
			postfix += token;

		else
			if (token == '(')
				stack.push(token);
			else
				if (token == ')')
				{
					while (!stack.empty() && stack.top() != '(')
					{
						postfix += stack.top();
						stack.pop();
					}
					if (!stack.empty() && stack.top() != '(')
						return "Invalid Expression";
					else
						stack.pop();
				}
				else
				{
					while (!stack.empty() && getPriority(token) <= getPriority(stack.top()))
					{
						postfix += stack.top();
						stack.pop();
					}
					stack.push(token);
				}
	}
	while (!stack.empty())
	{
		postfix += stack.top();
		stack.pop();
	}
	return postfix;
}
